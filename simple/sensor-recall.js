var Web3 = require('web3');
var fs = require('fs');

var web3 = new Web3();

web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));

var coinbase = web3.eth.coinbase;
console.log(coinbase);
web3.eth.defaultAccount = coinbase;
var balance = web3.eth.getBalance(coinbase);
console.log(balance.toString(10));
console.log(balance);
// solidity code code
fs.readFile('smartcontracts/sensor-contract.sol', function(err, data) {
console.log('data from solidity file');
//console.log(data.toString());
  var source = data.toString();

var compiled = web3.eth.compile.solidity(source);
var keye = Object.keys(compiled);
var code = compiled[keye[0]].code;
// contract json abi, this is autogenerated using solc CLI
var abi = compiled[keye[0]].info.abiDefinition;

//console.log('that abi ===');
//console.log(abi);

var myContract;
console.log('start recall process');
	var myContract = web3.eth.contract(abi);
	var myContract = myContract.at('bff5da58c86ab5cda18c5238260d536c4d38cd32');
//console.log(mysamplingContract);
    console.log('start fo rtrererennnnsns');
  var returnName = myContract.getBrand();
  console.log(returnName);
console.log('after');
var returnOwner = myContract.getOwner();
console.log(returnOwner);
console.log('after');
var returnMeasure = myContract.getMeasure();
console.log(returnMeasure);
console.log('after');
});
