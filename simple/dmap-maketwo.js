var Web3 = require('web3');
var fs = require('fs');

var web3 = new Web3();

web3.setProvider(new web3.providers.HttpProvider('http://localhost:8552'));

var coinbase = web3.eth.coinbase;
console.log(coinbase);
web3.eth.defaultAccount = coinbase;
var balance = web3.eth.getBalance(coinbase);
console.log(balance.toString(10));
// solidity code code
fs.readFile('smartcontracts/dmap-contract.sol', function(err, data) {
console.log('data from solidity file');
console.log(data.toString());
  var source = data.toString();
console.log('after source');
var compiled = web3.eth.compile.solidity(source);
var keye = Object.keys(compiled);
var code = compiled[keye[0]].code;
// contract json abi, this is autogenerated using solc CLI
var abi = compiled[keye[0]].info.abiDefinition;

var myContract;
//  var blockwatch = web3.eth.filter('latest');
//console.log(blockwatch);

  web3.eth.contract(abi).new({data: code, gas: 900000,}, function (err, contract) {

    if (err) {
console.error(err);
      return;
    }
    else if(contract.address) {
      myContract = contract;
      console.log('address: ' + myContract.address);
      console.log('start fo rtrererennnnsns');
      myContract.setMappingDetail('cure5', 'cure6');
      myContract.setMappingDetailtwo('cure7', 'cure8');
      myContract.setDataModel('0x52bddcd1897e2b7516b2218e69fda38c017c2977');      
      myContract.setDsampling('0xe4827d823aeea0017480b87df86aaa3e98d0937c');
      myContract.setDscoring(123, 456);

    }
  });

});
