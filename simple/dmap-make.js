var Web3 = require('web3');
var fs = require('fs');

var web3 = new Web3();

web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));

var coinbase = web3.eth.coinbase;
console.log(coinbase);
web3.eth.defaultAccount = coinbase;
var balance = web3.eth.getBalance(coinbase);
console.log(balance.toString(10));
// solidity code code
fs.readFile('smartcontracts/dmap-contract.sol', function(err, data) {
console.log('data from solidity file');
console.log(data.toString());
  var source = data.toString();
console.log('after source');
var compiled = web3.eth.compile.solidity(source);
var keye = Object.keys(compiled);
var code = compiled[keye[0]].code;
// contract json abi, this is autogenerated using solc CLI
var abi = compiled[keye[0]].info.abiDefinition;

var myContract;
//  var blockwatch = web3.eth.filter('latest');
//console.log(blockwatch);

  web3.eth.contract(abi).new({data: code, gas: 2900000,}, function (err, contract) {

    if (err) {
console.error(err);
      return;
    }
    else if(contract.address) {
      myContract = contract;
      console.log('address: ' + myContract.address);
      console.log('start fo rtrererennnnsns');
      myContract.setMappingDetail('1234567812345678123456781234', 'cure2');
      var gitrepo = 'https://github.com/aboynejames/mappingtemperatureactivity.git';
console.log(gitrepo.length);
      str1 = gitrepo.slice(0,24);
      str2 = gitrepo.slice(24,48);
      str3 = gitrepo.slice(48,62);
      str4 = gitrepo.slice(62,84);
console.log(str1);
console.log(str2);
console.log(str3);
console.log(str4);
console.log(gitrepo);
      var fullstring = str1 + str2 + str3 + str4;
console.log(fullstring);
      var gitcommithash = '56c140114c4a45a0577da2d2cda6abf534be8aa9';
console.log(gitcommithash.length);
      //myContract.setMappingDetailtwo('cure3', 'cure4');
      var codedata = myContract.setMappingDetailcodeurl(str1, str2, str3);
console.log('cod OKK');
console.log(codedata);


      strh1 = gitcommithash.slice(0,24);
      strh2 = gitcommithash.slice(24,48);
      var codehashdata = myContract.setMappingDetailcodehash(strh1, strh2);

//      explicit reachers invite
      // simulate explicit peer invite and setting of storage API contract
      myContract.setPeerInvite('0xe4827d823aeea0017480b87df86aaa3e98d0937c');
      myContract.setPeerInviteStorageAddress('0xe4827d823aeea0017480b87df86aaa3e98d0934c');

      // another invite
      myContract.setPeerInvite('0xe4827d823aeea0017480b87df86aaa3e98d0931c');
      myContract.setPeerInviteStorageAddress('0xe4827d823aeea0017480b87df86aaa3e98d0914c');

      myContract.setDataModel('0x52bddcd1897e2b7516b2218e69fda38c017c29b9');
      myContract.setDsampling('0x52bddcd1897e2b7516b2218e69fda38c017c29b9');
      myContract.setDscoring(123, 456);

    }
  });

});
