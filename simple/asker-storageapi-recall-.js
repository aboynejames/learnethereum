var Web3 = require('web3');
var fs = require('fs');

var web3 = new Web3();

web3.setProvider(new web3.providers.HttpProvider('http://localhost:8552'));

var coinbase = 'e4827d823aeea0017480b87df86aaa3e98d0937c';//web3.eth.coinbase;
console.log(coinbase);
web3.eth.defaultAccount = coinbase;
var balance = web3.eth.getBalance(coinbase);
console.log(balance.toString(10));
// solidity code code
fs.readFile('smartcontracts/storageapi-contract.sol', function(err, data) {
//console.log('data from solidity file');
//console.log(data.toString());
  var source = data.toString();

var compiled = web3.eth.compile.solidity(source);
//console.log(compiled);
var keye = Object.keys(compiled);
var code = compiled[keye[0]].code;
// contract json abi, this is autogenerated using solc CLI
var abi = compiled[keye[0]].info.abiDefinition;
//console.log('that abi ===');
//console.log(abi);

var myContract;
console.log('start recall process');
	var myContract = web3.eth.contract(abi);
	var mysamplingContract = myContract.at('3fb89259e33b26689f82f77763d5e62a12e8b211');
//console.log(mysamplingContract);

  // call the contract to return data
  var returnDmap = mysamplingContract.getToken();
console.log('Token ID =====');
console.log(returnDmap);

var returnmapping = mysamplingContract.getOwner('787878787');
console.log('Token mapp =====');
console.log(returnmapping);

var returnpermission = mysamplingContract.getPermissionLevel();
console.log('Token permission =====');
console.log(returnpermission);
console.log(returnpermission.toString(10));

var clanician = '0xe4827d823aeea0017480b87df86aaa3e98d0937c';

var steper = mysamplingContract.setPermission(clanician, 1);
console.log(steper);
console.log('permission feeback');

});
